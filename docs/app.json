[{"name": "app.py", "content": "# Brandon Shellenberger\n# 4/03/2024\n\n# import all packages\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\nfrom shinyswatch import theme\nfrom shinywidgets import render_plotly\nimport plotly.express as px\nimport pandas as pd\nfrom faicons import icon_svg\nimport mlbstatsapi\n\n\nui.page_opts(title=\"Kansas City Royals Season\", fillable=True)\n\nwith ui.sidebar(open='open'):\n    \n    ui.h2(\"Select a range of seasons\")\n    \n    ui.input_slider(\n        'year', \n        'Seasons',\n        min=00,\n        max=24,\n        value=[20, 24],\n    )\n    \n    \n    ui.hr()\n    ui.a(\n        'Python MLB Stats API',\n        href='https://github.com/zero-sum-seattle/python-mlb-statsapi',\n        target='_blank'\n    )\n    \n    ui.a(\n        'GitHub',\n        href='https://github.com/Bshell13/cintel-06-custom',\n        target='_blank'\n    )\n\n\n@reactive.calc\ndef get_stats():\n    year = list(input.year())\n    year_range = []\n    for i in year:\n        year_range.append(int('20' + str(i)))\n    \n    mlb = mlbstatsapi.Mlb()\n\n    team_id = mlb.get_team_id('Kansas City Royals')[0]\n    stats = ['season']\n    groups = ['pitching', 'hitting']\n    seasonal_hitting_stats = {}\n    seasonal_pitching_stats = {}\n    for year in range(year_range[0], year_range[1] + 1):\n        params = {'season': year}\n\n        seasonal_hitting_stats[year] = {}\n        seasonal_pitching_stats[year] = {}\n\n        stats_dict= mlb.get_team_stats(team_id, stats=stats, groups=groups, **params)\n        hitting_stats = stats_dict['hitting']['season']\n        pitching_stats = stats_dict['pitching']['season']\n        \n        for split in hitting_stats.splits:\n            for k, v in split.stat.__dict__.items():\n                seasonal_hitting_stats[year][k] = v\n        \n        for split in pitching_stats.splits:\n            for k, v in split.stat.__dict__.items():\n                seasonal_pitching_stats[year][k] = v\n\n    seasonal_hitting_stats_df = pd.DataFrame(seasonal_hitting_stats).T\n    seasonal_pitching_stats_df = pd.DataFrame(seasonal_pitching_stats).T\n    \n    return seasonal_hitting_stats_df, seasonal_pitching_stats_df\n\n\n# Value boxes of stats for hitting, pitching, and base running seperatly\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"baseball-bat-ball\"),\n        theme = (\"info\")\n    ):\n        ui.h2(\"Hitting\")\n        @render.text\n        def display_avg():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Batting AVG: {seasonal_hitting_stats['avg'][2024]}\"\n        \n        @render.text\n        def display_hits():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Total Hits: {seasonal_hitting_stats['hits'][2024]}\"\n        \n        @render.text\n        def display_doubles():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Doubles: {seasonal_hitting_stats['doubles'][2024]}\"\n        \n        @render.text\n        def display_triples():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Triples: {seasonal_hitting_stats['triples'][2024]}\"\n        \n        @render.text\n        def display_homeruns():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Home Runs: {seasonal_hitting_stats['homeruns'][2024]}\"\n\n        \n    with ui.value_box(\n        showcase=icon_svg(\"baseball\"),\n        theme = (\"info\")\n    ):\n        ui.h2(\"Pitching\")\n        @render.text\n        def display_era():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"ERA: {seasonal_pitching_stats['era'][2024]}\"\n        \n        @render.text\n        def display_number_of_pitches():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Total Pitches: {seasonal_pitching_stats['numberofpitches'][2024]}\"\n        \n        @render.text\n        def display_batters_faced():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Total Batters Faced: {seasonal_pitching_stats['battersfaced'][2024]}\"\n        \n        @render.text\n        def display_strikeouts():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Total Strikeouts: {seasonal_pitching_stats['strikeouts'][2024]}\"\n        \n        @render.text\n        def display_shutouts():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Total Shutouts: {seasonal_pitching_stats['shutouts'][2024]}\"\n        \n\n    with ui.value_box(\n        showcase=icon_svg(\"person-running\"),\n        theme = (\"info\")\n    ):\n        \n        ui.h2(\"Base Running\")\n        @render.text\n        def display_total_runs():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Total Runs: {seasonal_hitting_stats['runs'][2024]}\"\n        \n        @render.text\n        def display_rbi():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"RBI: {seasonal_hitting_stats['rbi'][2024]}\"\n        \n        @render.text\n        def display_stolen_base_percentage():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Stolen Base Percentage: {seasonal_hitting_stats['stolenbasepercentage'][2024]}\"\n        \n        @render.text\n        def display_obp():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"On-Base Percentage: {seasonal_hitting_stats['obp'][2024]}\"\n        \n        @render.text\n        def display_left_on_base():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            return f\"Runners Left on Base: {seasonal_hitting_stats['leftonbase'][2024]}\"\n\nwith ui.navset_card_tab(id='tab'):\n    with ui.nav_panel(\"Win-Loss\"):\n        @render_plotly\n        def win_loss_line_graph():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            \n            plotly_win_loss = px.line(\n                seasonal_pitching_stats,\n                y=seasonal_pitching_stats['wins'] / (seasonal_pitching_stats['wins'] + seasonal_pitching_stats['losses']),\n            )\n            plotly_win_loss.update_layout(\n                xaxis_title=\"Season\",\n                yaxis_title='Win-Loss %'\n            )\n            return plotly_win_loss\n        \n    with ui.nav_panel('Batting AVG'):\n        @render_plotly\n        def batting_avg():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            \n            plotly_batting_avg = px.line(\n                seasonal_hitting_stats,\n                y=seasonal_hitting_stats['avg'],\n            )\n            plotly_batting_avg.update_layout(\n                xaxis_title=\"Season\",\n                yaxis_title='Batting AVG %'\n            )\n            return plotly_batting_avg\n        \n    with ui.nav_panel('ERA'):\n        @render_plotly\n        def era():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            \n            plotly_era = px.line(\n                seasonal_pitching_stats,\n                y=seasonal_pitching_stats['era'],\n            )\n            plotly_era.update_layout(\n                xaxis_title=\"Season\",\n                yaxis_title='ERA'\n            )\n            return plotly_era\n        \n    with ui.nav_panel('Total Runs'):\n        @render_plotly\n        def total_runs():\n            seasonal_hitting_stats, seasonal_pitching_stats = get_stats()\n            \n            plotly_total_runs = px.line(\n                seasonal_hitting_stats,\n                y=seasonal_hitting_stats['runs'],\n            )\n            plotly_total_runs.update_layout(\n                xaxis_title=\"Season\",\n                yaxis_title='Total Runs'\n            )\n            return plotly_total_runs", "type": "text"}]